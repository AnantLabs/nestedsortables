#summary Documentation for the NestedSortable Widget.
= Introduction =

The !NestedSortable Widget (from now on just _widget_) is built on top of the plain [NestedSortableDocumentation NestedSortable] and is a component that will, basically, do everything for you, as long as you provide it with a data source that will pass in your list of nested elements in JSON format. Given that list, it will build the HTML for the whole component, construct the [NestedSortableDocumentation NestedSortables] and show visual clues as to when things are being loaded or saved. 

The list items can have multiple columns, since the widget will draw your list in a way that looks like a table. The widget also has support for pagination of the list, both on the client (you don't have to show the whole list at once) and the server (you don't have to download the whole list at once). This can be a necessity when you are sorting a list with a large number of items. The widget code, perhaps surprisingly, is almost 3 times larger than the [NestedSortableDocumentation NestedSortable plugin's] code. The good news is that all is already written for you and with it in your hands you will be able to create a list that can be sorted and nested by your user in no time.

You should [http://www.bernardopadua.com/nestedSortables/test/widget/ check the demo], to really get a grasp of its main functionalities. Note that the data source used in the demo is a little stupid: it won't save the order of the elements, it will just pretend it did.



= Download =

You can download the widget package (both the compressed and regular JS file, a CSS file, and 2 images) from the link bellow:

  [http://nestedsortables.googlecode.com/files/NestedSortableWidget-1.0.zip NestedSortable Widget 1.0]

You can also get the uncompressed code, as well as the test code used in the demo, directly from the SVN server:
  [http://nestedsortables.googlecode.com/svn/tags/1.0/ Source]

You will also need the dependencies.


= Dependencies = 

It was built on the latest versions of both jQuery and Interface. 

 * [http://code.google.com/p/jqueryjs/downloads/detail?name=jquery-1.2.pack.js jQuery] 1.1 or above (tested with 1.2)
 * [http://interface.eyecon.ro/interface/interface_1.2.zip Interface 1.2] or above (only needs the components bellow, in that order)
   * iutil.js
   * idrag.js
   * idrop.js
   * isortables.js
 * [http://nestedsortables.googlecode.com/files/inestedsortable-1.0.pack.js The plain NestedSortable plugin]
 * [http://jollytoad.googlepages.com/json.js toJSON plugin] (only needed if you want to *send* the data back to the server in JSON format - just skip it if you are not sure)

Those dependencies have to be loaded in your HTML file in that order and before the widget itself.

= Usage = 

== Basic Usage ==


First you need to set up your data source, which will provide the list of nested elements to be displayed by the widget, in JSON format. This data source should also be capable of receiving data from the widget, once the user saves the order of the elements, and update your database so that. More details about this data source will be given bellow. For testing purposes, the easiest data source you could create is a plain text file with the contents of your list in JSON. It obviously won't save your list order, but will allow you to view the list. So, create a file, named `my_list_json.js`, with the following contents:

{{{
{
  "requestFirstIndex" : 0,
  "firstIndex" : 0,
  "count": 4,
  "totalCount" : 4,
  "columns":["Title(ID)", "Owner", "Updated"],
  "items": 
  [
    {
      "id":1, 
      "info":["Page Title(1)", "Bernardo P치dua", "2007-06-09 2:44 pm"]
    },
    {
      "id":2, 
      "info":["Page Title(2)", "Bernardo P치dua", "2007-06-09 2:44 pm"],
      "children": 
        [
          {
            "id":3, 
            "info":["Page Title(3)", "Bernardo P치dua", "2007-06-09 2:44 pm"],
            "children": [
              {
                "id":4, 
                "info":["Page Title(4)", "Bernardo P치dua", "2007-06-09 2:44 pm"]
              }
            ]
          }
        ]
    }
  ]
}

}}}

Now include the dependencies and the plugin itself in your HTML file.

{{{
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="interface.js"></script>
<script type="text/javascript" src="inestedsortable.js"></script>
<script type="text/javascript" src="jquery.nestedsortablewidget.js"></script>
}}}

You will also need to include the CSS for the component, if you don't want it to look too ugly. Also be aware this CSS loads a couple of images (included in the download), so you need to make sure they are in your server as well.

{{{
<link rel="stylesheet" href="../../src/widget/style/nestedsortablewidget.css" type="text/css">
}}}

In you HTML file, create an empty HTML element (usually a `DIV`) where the component will be drawn. The contents of this element will be deleted once the widget is configured.

{{{
 <div id="my_widget"></div>
}}}

Add the JS code that will configure the widget. Once this code is executed, the widget will fetch the list contents from the loadUrl and display it for you.

{{{
jQuery( function($) {
  $('#my_widget').NestedSortableWidget({
	loadUrl: "my_list_json.js"
  });
});
}}}
 
== Configuration Parameters ==

The !NestedSortable plugin will add three functions to the jQuery object: `NestedSortableWidget`, `NestedSortableWidgetDestroy` and `NestedSortableWidgetSave`. The first will configure the widget and takes a object of configuration parameters. The other two should be called on already built widgets and take no parameters.

`NestedSortableWidget` needs to be called on a jQuery object after selecting the element that will hold the component. You should probably use `$.NestedSortable("#element_id").NestedSortableWidget({(...)})` to do it.

Like in the regular [NestedSortableDocumentation NestedSortable], you configure the widget by passing a single object to the `NestedSortableWidget` method. Use the `{}` notation to create such object. Lots of things can be configured in the widget.

First, all the options of the underlying [NestedSortableDocumentation NestedSortable] and Interface's Sortable can be altered, by passing an object to the `nestedSortCfg` property. You can also change the names of the classes used to draw the component, by passing an object to the `classes` property. You can also change the text used in the widget, by passing an object to the `text` property. Finally, other options change the way things are displayed, loaded and saved, and allow you to add callbacks that are executed at special moments of the widget's life.

The table bellow shows all the parameters that can be passed to the `NestedSortableWidget`.

|| *Parameter Name*  || *Value Type* || *Type/Default* || *Description* ||
|| name || string || optional / `'nested-sortable-widget`' || ||
|| loadUrl || string || mandatory || ||
|| saveUrl || string || optional / same as loadUrl || ||
|| loadUrlParams || Object || optional || ||
|| saveUrlParams || Object || optional || ||
|| loadRequestType|| string || optional / `'GET'` || ||
|| saveRequestType|| string || optional / `'POST'` ||  ||
|| serializeWithJSON || boolean || optional / `false` ||  ||
|| onLoad|| Function || optional ||  ||
|| onInitialLoad || Function || optional ||  ||
|| onLoadError || Function || optional ||  ||
|| onSave || Function || optional ||  ||
|| onSaveError || Function || optional ||  ||
|| onDestroy || Function || optional ||  ||
|| nestedSortCfg || Object || optional ||  ||
|| colsWidth || float or Array of floats || optional / 150 ||  ||
|| whiteMargin|| float || optional / 2 ||  ||
|| padding || float or Array of floats|| optional / 4 ||  ||
|| measureUnit || string || optional / 'px' ||  ||
|| handle|| boolean || optional / `false` ||  ||
|| paginate || boolean || optional / `false` ||  ||
|| greedy || boolean || optional / `false` ||  ||
|| incremental || boolean || optional / `false` ||  ||

|| itemsPerPage || integer || optional / `10` ||  ||
|| startPage || integer || optional / `1` ||  ||
|| pageChangeTimer || integer || optional / `"500"` ||  ||
|| fadeOutHover || boolean || optional / `false` ||  ||
|| transitionAnim || string || optional / `'slide-parallel'` ||  ||
|| transitionOut || Function || optional / `false` ||  ||
|| transitionIn || Function || optional / `false` ||  ||

== Data Source ==


= Known Bugs =

As of version 1.0, there are 2 minor cosmetic bugs, one for IE6 and the other in Safari. They are not show stoppers. There is another bug in Incremental mode, which is only a little annoying, so I don't recommend using incremental mode. 

Refer to [http://code.google.com/p/nestedsortables/issues/list?q=label:NestedSortableWidget the issues list for more details].

Interface 1.2 was built for jQuery 1.1 and does have a few issues, specially with animations, when you use it with jQuery 1.2. So, with jQuery 1.2, you might encounter issues with the animation options in the !NestedSortables, which are inherited from Interface. jQuery 1.2 was just released, lets hope Interface is updated to support it. The combination used in the demo is using jQuery 1.2 and Interface 1.2, and at least in those examples, doesn't generate any errors. The `fadeOutHover` option will be deactivated when using jQuery 1.2, due to one of those incompatibilities.

= TODO for next versions = 

 * More configuration options (as needed by the users)